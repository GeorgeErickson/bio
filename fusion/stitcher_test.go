package fusion

import (
	"testing"

	"github.com/grailbio/testutil/expect"
	"github.com/grailbio/testutil/h"
)

func TestStitcher(t *testing.T) {
	resultIs := func(r1, r2 string) *h.Matcher {
		m := &h.Matcher{
			Msg:    "r1=" + r1 + ", r2=" + r2,
			NotMsg: "r1!=" + r1 + ", r2!=" + r2,
		}
		m.Match = func(got interface{}) h.Result {
			frag := got.(Fragment)
			return h.NewResult(frag.R1Seq == r1 && frag.R2Seq == r2, got, m.Msg)
		}
		return m
	}

	s := NewStitcher(19, 0.9)
	stats := Stats{}
	frag := s.Stitch("f0",
		"TGGATCCCTAGCTCTTATCATGGCACTCTGTTGAGTTTGTGAAATGCATCTTCAAAGAGGTTGTCAACTGTTGCTGGAGACAACGGCTCTTCACAGACCACCTCCTTTTCTAAGGAAAATGGCTGGTATGACGAGGTAAA",
		"GAGTCCTTGGATCCCTAGCTCTTATCATGGCACTCTGTTGAGTTTGTCAAATGCATCTTCAAAGAGGTTGTCAACTGTTGCTGGAGACAACGGCTCTTCACAGACCACCTCCTTTTCTAAGGAAAATGGCTGGTATGACG", &stats)
	expect.EQ(t, frag.Name, "f0")
	expect.That(t, frag, resultIs("TGGATCCCTAGCTCTTATCATGGCACTCTGTTGAGTTTGTGAAATGCATCTTCAAAGAGGTTGTCAACTGTTGCTGGAGACAACGGCTCTTCACAGACCACCTCCTTTTCTAAGGAAAATGGCTGGTATGACG", ""))
	expect.That(t, s.Stitch("f1",
		"CCCAATACTCCGGCCCCTCCTGCTCTATCCACGGCGCCCGCGGCTCCATCCTCTGGCTCGCGGCGTCGCTGTCGAACCGCACGAACTGCGTGTCGTCCACGTAGCCCACGGCGATGAAGCGGGGCTCCCCGCGGCCGGGCCG",
		"GCTCTATCCACGGCGCCCGAGGCTCCATCCTCTGGCTCGCGGCGTCGCTGTCGAACCGCACGAACTGCGTGTCGTCCACGTAGCCCACGGCGATGAAGCGGGGCTCCCCGCGGCCGGGCCGGGACACGGAGGTGTAGAAAT", &stats),
		resultIs("CCCAATACTCCGGCCCCTCCTGCTCTATCCACGGCGCCCGCGGCTCCATCCTCTGGCTCGCGGCGTCGCTGTCGAACCGCACGAACTGCGTGTCGTCCACGTAGCCCACGGCGATGAAGCGGGGCTCCCCGCGGCCGGGCCGGGACACGGAGGTGTAGAAAT", ""))

	s = NewStitcher(5, 0.9)
	expect.That(t, s.Stitch("f1", "AAAGTTCAGG", "TTCAGGTAG", &stats), resultIs("AAAGTTCAGGTAG", ""))
	expect.That(t, s.Stitch("f2", "AAAGTTCAGG", "TTCAGG", &stats), resultIs("AAAGTTCAGG", ""))
	expect.That(t, s.Stitch("f3", "AAAGTTCAGG", "TTCAG", &stats), resultIs("AAAGTTCAG", ""))
	expect.That(t, s.Stitch("f4", "AAAGTTCAGG", "CCAAAGT", &stats), resultIs("AAAGT", ""))
	expect.That(t, s.Stitch("f5", "AAAGTTCAGG", "CCAAAGTTCAGG", &stats), resultIs("AAAGTTCAGG", ""))
	expect.That(t, s.Stitch("f5", "AAAGTTCAGG", "CCAAAGTTCAGG", &stats), resultIs("AAAGTTCAGG", ""))
	expect.That(t, s.Stitch("f6", "AAAGTTCAGG", "CCAAAGTTCAGGG", &stats), resultIs("AAAGTTCAGGG", ""))
}
