// Code generated by protoc-gen-gogo.
// source: proto/bio/sort.proto
// DO NOT EDIT!

package biopb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SortShardBlockIndex struct {
	StartKey   uint64 `protobuf:"varint,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	StartSeq   uint64 `protobuf:"varint,2,opt,name=start_seq,json=startSeq,proto3" json:"start_seq,omitempty"`
	FileOffset uint64 `protobuf:"varint,3,opt,name=file_offset,json=fileOffset,proto3" json:"file_offset,omitempty"`
	NumRecords uint32 `protobuf:"varint,4,opt,name=num_records,json=numRecords,proto3" json:"num_records,omitempty"`
}

func (m *SortShardBlockIndex) Reset()                    { *m = SortShardBlockIndex{} }
func (m *SortShardBlockIndex) String() string            { return proto.CompactTextString(m) }
func (*SortShardBlockIndex) ProtoMessage()               {}
func (*SortShardBlockIndex) Descriptor() ([]byte, []int) { return fileDescriptorSort, []int{0} }

func (m *SortShardBlockIndex) GetStartKey() uint64 {
	if m != nil {
		return m.StartKey
	}
	return 0
}

func (m *SortShardBlockIndex) GetStartSeq() uint64 {
	if m != nil {
		return m.StartSeq
	}
	return 0
}

func (m *SortShardBlockIndex) GetFileOffset() uint64 {
	if m != nil {
		return m.FileOffset
	}
	return 0
}

func (m *SortShardBlockIndex) GetNumRecords() uint32 {
	if m != nil {
		return m.NumRecords
	}
	return 0
}

type SortShardIndex struct {
	NumRecords       int64                 `protobuf:"varint,1,opt,name=num_records,json=numRecords,proto3" json:"num_records,omitempty"`
	Snappy           bool                  `protobuf:"varint,2,opt,name=snappy,proto3" json:"snappy,omitempty"`
	EncodedBamHeader []byte                `protobuf:"bytes,15,opt,name=encoded_bam_header,json=encodedBamHeader,proto3" json:"encoded_bam_header,omitempty"`
	Blocks           []SortShardBlockIndex `protobuf:"bytes,16,rep,name=blocks" json:"blocks"`
}

func (m *SortShardIndex) Reset()                    { *m = SortShardIndex{} }
func (m *SortShardIndex) String() string            { return proto.CompactTextString(m) }
func (*SortShardIndex) ProtoMessage()               {}
func (*SortShardIndex) Descriptor() ([]byte, []int) { return fileDescriptorSort, []int{1} }

func (m *SortShardIndex) GetNumRecords() int64 {
	if m != nil {
		return m.NumRecords
	}
	return 0
}

func (m *SortShardIndex) GetSnappy() bool {
	if m != nil {
		return m.Snappy
	}
	return false
}

func (m *SortShardIndex) GetEncodedBamHeader() []byte {
	if m != nil {
		return m.EncodedBamHeader
	}
	return nil
}

func (m *SortShardIndex) GetBlocks() []SortShardBlockIndex {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*SortShardBlockIndex)(nil), "sorter.SortShardBlockIndex")
	proto.RegisterType((*SortShardIndex)(nil), "sorter.SortShardIndex")
}
func (m *SortShardBlockIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortShardBlockIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartKey != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSort(dAtA, i, uint64(m.StartKey))
	}
	if m.StartSeq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSort(dAtA, i, uint64(m.StartSeq))
	}
	if m.FileOffset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSort(dAtA, i, uint64(m.FileOffset))
	}
	if m.NumRecords != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSort(dAtA, i, uint64(m.NumRecords))
	}
	return i, nil
}

func (m *SortShardIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortShardIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumRecords != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSort(dAtA, i, uint64(m.NumRecords))
	}
	if m.Snappy {
		dAtA[i] = 0x10
		i++
		if m.Snappy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.EncodedBamHeader) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSort(dAtA, i, uint64(len(m.EncodedBamHeader)))
		i += copy(dAtA[i:], m.EncodedBamHeader)
	}
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintSort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Sort(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Sort(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSort(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SortShardBlockIndex) Size() (n int) {
	var l int
	_ = l
	if m.StartKey != 0 {
		n += 1 + sovSort(uint64(m.StartKey))
	}
	if m.StartSeq != 0 {
		n += 1 + sovSort(uint64(m.StartSeq))
	}
	if m.FileOffset != 0 {
		n += 1 + sovSort(uint64(m.FileOffset))
	}
	if m.NumRecords != 0 {
		n += 1 + sovSort(uint64(m.NumRecords))
	}
	return n
}

func (m *SortShardIndex) Size() (n int) {
	var l int
	_ = l
	if m.NumRecords != 0 {
		n += 1 + sovSort(uint64(m.NumRecords))
	}
	if m.Snappy {
		n += 2
	}
	l = len(m.EncodedBamHeader)
	if l > 0 {
		n += 1 + l + sovSort(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 2 + l + sovSort(uint64(l))
		}
	}
	return n
}

func sovSort(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSort(x uint64) (n int) {
	return sovSort(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SortShardBlockIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortShardBlockIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortShardBlockIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			m.StartKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartKey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartSeq", wireType)
			}
			m.StartSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartSeq |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileOffset", wireType)
			}
			m.FileOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileOffset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRecords", wireType)
			}
			m.NumRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRecords |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortShardIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortShardIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortShardIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRecords", wireType)
			}
			m.NumRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRecords |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snappy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Snappy = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedBamHeader", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSort
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedBamHeader = append(m.EncodedBamHeader[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedBamHeader == nil {
				m.EncodedBamHeader = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, SortShardBlockIndex{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSort(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSort
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSort
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSort
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSort(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSort = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSort   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/bio/sort.proto", fileDescriptorSort) }

var fileDescriptorSort = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xcd, 0x4a, 0xc3, 0x40,
	0x18, 0xec, 0xda, 0x12, 0xea, 0xd6, 0x9f, 0xb2, 0x8a, 0x04, 0x8b, 0x69, 0xe8, 0x29, 0x07, 0x4d,
	0x40, 0x4f, 0x5e, 0x73, 0x52, 0x3c, 0x08, 0xe9, 0xcd, 0x4b, 0xd8, 0x4d, 0xbe, 0xb4, 0xa1, 0x4d,
	0x36, 0xdd, 0xdd, 0x80, 0x7d, 0x0b, 0x7d, 0x15, 0x9f, 0xa2, 0x47, 0x9f, 0x40, 0xa4, 0xbe, 0x88,
	0xec, 0x26, 0x68, 0x11, 0x0f, 0x0b, 0xdf, 0xcc, 0xec, 0xc0, 0x30, 0x83, 0x4f, 0x2b, 0xc1, 0x15,
	0x0f, 0x58, 0xce, 0x03, 0xc9, 0x85, 0xf2, 0x0d, 0x24, 0x96, 0xbe, 0x41, 0x9c, 0x5f, 0xcd, 0x72,
	0x35, 0xaf, 0x99, 0x9f, 0xf0, 0x22, 0x98, 0xf1, 0x19, 0x0f, 0x8c, 0xcc, 0xea, 0xcc, 0xa0, 0xc6,
	0xaa, 0xaf, 0xc6, 0x36, 0x79, 0x45, 0xf8, 0x64, 0xca, 0x85, 0x9a, 0xce, 0xa9, 0x48, 0xc3, 0x25,
	0x4f, 0x16, 0xf7, 0x65, 0x0a, 0xcf, 0x64, 0x84, 0xf7, 0xa5, 0xa2, 0x42, 0xc5, 0x0b, 0x58, 0xdb,
	0xc8, 0x45, 0x5e, 0x2f, 0xea, 0x1b, 0xe2, 0x01, 0xd6, 0xbf, 0xa2, 0x84, 0x95, 0xbd, 0xb7, 0x23,
	0x4e, 0x61, 0x45, 0xc6, 0x78, 0x90, 0xe5, 0x4b, 0x88, 0x79, 0x96, 0x49, 0x50, 0x76, 0xd7, 0xc8,
	0x58, 0x53, 0x8f, 0x86, 0xd1, 0x1f, 0xca, 0xba, 0x88, 0x05, 0x24, 0x5c, 0xa4, 0xd2, 0xee, 0xb9,
	0xc8, 0x3b, 0x8c, 0x70, 0x59, 0x17, 0x51, 0xc3, 0x4c, 0xde, 0x10, 0x3e, 0xfa, 0xc9, 0xd4, 0xc4,
	0xf9, 0xe3, 0xd1, 0x81, 0xba, 0xbb, 0x1e, 0x72, 0x86, 0x2d, 0x59, 0xd2, 0xaa, 0x5a, 0x9b, 0x3c,
	0xfd, 0xa8, 0x45, 0xe4, 0x12, 0x13, 0x28, 0x13, 0x9e, 0x42, 0x1a, 0x33, 0x5a, 0xc4, 0x73, 0xa0,
	0x29, 0x08, 0xfb, 0xd8, 0x45, 0xde, 0x41, 0x34, 0x6c, 0x95, 0x90, 0x16, 0x77, 0x86, 0x27, 0xb7,
	0xd8, 0x62, 0xba, 0x03, 0x69, 0x0f, 0xdd, 0xae, 0x37, 0xb8, 0x1e, 0xf9, 0x4d, 0xab, 0xfe, 0x3f,
	0x15, 0x85, 0xbd, 0xcd, 0xc7, 0xb8, 0x13, 0xb5, 0x86, 0x30, 0xd8, 0x6c, 0x1d, 0xf4, 0xbe, 0x75,
	0xd0, 0xe7, 0xd6, 0x41, 0x2f, 0x5f, 0x4e, 0xe7, 0xe9, 0x62, 0x77, 0x09, 0x41, 0xf3, 0xa5, 0x5e,
	0xac, 0x7d, 0x15, 0x63, 0x96, 0x19, 0xe0, 0xe6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x53, 0x68,
	0x39, 0xcf, 0x01, 0x00, 0x00,
}
