// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/bio/sort.proto

package biopb // import "github.com/grailbio/bio/biopb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SortShardBlockIndex struct {
	StartKey   uint64 `protobuf:"varint,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	StartSeq   uint64 `protobuf:"varint,2,opt,name=start_seq,json=startSeq,proto3" json:"start_seq,omitempty"`
	FileOffset uint64 `protobuf:"varint,3,opt,name=file_offset,json=fileOffset,proto3" json:"file_offset,omitempty"`
	NumRecords uint32 `protobuf:"varint,4,opt,name=num_records,json=numRecords,proto3" json:"num_records,omitempty"`
}

func (m *SortShardBlockIndex) Reset()         { *m = SortShardBlockIndex{} }
func (m *SortShardBlockIndex) String() string { return proto.CompactTextString(m) }
func (*SortShardBlockIndex) ProtoMessage()    {}
func (*SortShardBlockIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_sort_7f232c7936230cd7, []int{0}
}
func (m *SortShardBlockIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortShardBlockIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortShardBlockIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SortShardBlockIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortShardBlockIndex.Merge(dst, src)
}
func (m *SortShardBlockIndex) XXX_Size() int {
	return m.Size()
}
func (m *SortShardBlockIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_SortShardBlockIndex.DiscardUnknown(m)
}

var xxx_messageInfo_SortShardBlockIndex proto.InternalMessageInfo

func (m *SortShardBlockIndex) GetStartKey() uint64 {
	if m != nil {
		return m.StartKey
	}
	return 0
}

func (m *SortShardBlockIndex) GetStartSeq() uint64 {
	if m != nil {
		return m.StartSeq
	}
	return 0
}

func (m *SortShardBlockIndex) GetFileOffset() uint64 {
	if m != nil {
		return m.FileOffset
	}
	return 0
}

func (m *SortShardBlockIndex) GetNumRecords() uint32 {
	if m != nil {
		return m.NumRecords
	}
	return 0
}

type SortShardIndex struct {
	NumRecords       int64                 `protobuf:"varint,1,opt,name=num_records,json=numRecords,proto3" json:"num_records,omitempty"`
	Snappy           bool                  `protobuf:"varint,2,opt,name=snappy,proto3" json:"snappy,omitempty"`
	EncodedBamHeader []byte                `protobuf:"bytes,15,opt,name=encoded_bam_header,json=encodedBamHeader,proto3" json:"encoded_bam_header,omitempty"`
	Blocks           []SortShardBlockIndex `protobuf:"bytes,16,rep,name=blocks,proto3" json:"blocks"`
}

func (m *SortShardIndex) Reset()         { *m = SortShardIndex{} }
func (m *SortShardIndex) String() string { return proto.CompactTextString(m) }
func (*SortShardIndex) ProtoMessage()    {}
func (*SortShardIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_sort_7f232c7936230cd7, []int{1}
}
func (m *SortShardIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortShardIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortShardIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SortShardIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortShardIndex.Merge(dst, src)
}
func (m *SortShardIndex) XXX_Size() int {
	return m.Size()
}
func (m *SortShardIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_SortShardIndex.DiscardUnknown(m)
}

var xxx_messageInfo_SortShardIndex proto.InternalMessageInfo

func (m *SortShardIndex) GetNumRecords() int64 {
	if m != nil {
		return m.NumRecords
	}
	return 0
}

func (m *SortShardIndex) GetSnappy() bool {
	if m != nil {
		return m.Snappy
	}
	return false
}

func (m *SortShardIndex) GetEncodedBamHeader() []byte {
	if m != nil {
		return m.EncodedBamHeader
	}
	return nil
}

func (m *SortShardIndex) GetBlocks() []SortShardBlockIndex {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*SortShardBlockIndex)(nil), "sorter.SortShardBlockIndex")
	proto.RegisterType((*SortShardIndex)(nil), "sorter.SortShardIndex")
}
func (m *SortShardBlockIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortShardBlockIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartKey != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSort(dAtA, i, uint64(m.StartKey))
	}
	if m.StartSeq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSort(dAtA, i, uint64(m.StartSeq))
	}
	if m.FileOffset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSort(dAtA, i, uint64(m.FileOffset))
	}
	if m.NumRecords != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSort(dAtA, i, uint64(m.NumRecords))
	}
	return i, nil
}

func (m *SortShardIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortShardIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumRecords != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSort(dAtA, i, uint64(m.NumRecords))
	}
	if m.Snappy {
		dAtA[i] = 0x10
		i++
		if m.Snappy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.EncodedBamHeader) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSort(dAtA, i, uint64(len(m.EncodedBamHeader)))
		i += copy(dAtA[i:], m.EncodedBamHeader)
	}
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintSort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSort(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SortShardBlockIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartKey != 0 {
		n += 1 + sovSort(uint64(m.StartKey))
	}
	if m.StartSeq != 0 {
		n += 1 + sovSort(uint64(m.StartSeq))
	}
	if m.FileOffset != 0 {
		n += 1 + sovSort(uint64(m.FileOffset))
	}
	if m.NumRecords != 0 {
		n += 1 + sovSort(uint64(m.NumRecords))
	}
	return n
}

func (m *SortShardIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumRecords != 0 {
		n += 1 + sovSort(uint64(m.NumRecords))
	}
	if m.Snappy {
		n += 2
	}
	l = len(m.EncodedBamHeader)
	if l > 0 {
		n += 1 + l + sovSort(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 2 + l + sovSort(uint64(l))
		}
	}
	return n
}

func sovSort(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSort(x uint64) (n int) {
	return sovSort(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SortShardBlockIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortShardBlockIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortShardBlockIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			m.StartKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartKey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartSeq", wireType)
			}
			m.StartSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartSeq |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileOffset", wireType)
			}
			m.FileOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileOffset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRecords", wireType)
			}
			m.NumRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRecords |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortShardIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortShardIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortShardIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRecords", wireType)
			}
			m.NumRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRecords |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snappy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Snappy = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedBamHeader", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSort
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedBamHeader = append(m.EncodedBamHeader[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedBamHeader == nil {
				m.EncodedBamHeader = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, SortShardBlockIndex{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSort(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSort
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSort
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSort
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSort(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSort = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSort   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/bio/sort.proto", fileDescriptor_sort_7f232c7936230cd7) }

var fileDescriptor_sort_7f232c7936230cd7 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4f, 0x4b, 0xc3, 0x30,
	0x1c, 0x6d, 0xdc, 0x28, 0x33, 0xf3, 0xcf, 0x88, 0x22, 0xc5, 0x61, 0x57, 0x76, 0xea, 0x41, 0x5b,
	0xd0, 0x83, 0x78, 0xed, 0x49, 0xf1, 0x20, 0x74, 0x37, 0x2f, 0x25, 0x69, 0xd3, 0xad, 0x6c, 0x6d,
	0xba, 0x24, 0x05, 0xf7, 0x2d, 0xf4, 0xab, 0xf8, 0x29, 0x76, 0xdc, 0xd1, 0x93, 0xc8, 0xf6, 0x45,
	0x24, 0x69, 0xd1, 0x22, 0x1e, 0x02, 0xbf, 0xf7, 0x5e, 0x1e, 0x3c, 0xde, 0x83, 0xa7, 0x25, 0x67,
	0x92, 0xf9, 0x24, 0x63, 0xbe, 0x60, 0x5c, 0x7a, 0x1a, 0x22, 0x53, 0xdd, 0x94, 0x9f, 0x5f, 0x4d,
	0x33, 0x39, 0xab, 0x88, 0x17, 0xb3, 0xdc, 0x9f, 0xb2, 0x29, 0xf3, 0xb5, 0x4c, 0xaa, 0x54, 0xa3,
	0xda, 0xaa, 0xae, 0xda, 0x36, 0x7e, 0x03, 0xf0, 0x64, 0xc2, 0xb8, 0x9c, 0xcc, 0x30, 0x4f, 0x82,
	0x05, 0x8b, 0xe7, 0x0f, 0x45, 0x42, 0x5f, 0xd0, 0x10, 0xee, 0x0b, 0x89, 0xb9, 0x8c, 0xe6, 0x74,
	0x65, 0x01, 0x07, 0xb8, 0xdd, 0xb0, 0xa7, 0x89, 0x47, 0xba, 0xfa, 0x15, 0x05, 0x5d, 0x5a, 0x7b,
	0x2d, 0x71, 0x42, 0x97, 0x68, 0x04, 0xfb, 0x69, 0xb6, 0xa0, 0x11, 0x4b, 0x53, 0x41, 0xa5, 0xd5,
	0xd1, 0x32, 0x54, 0xd4, 0x93, 0x66, 0xd4, 0x87, 0xa2, 0xca, 0x23, 0x4e, 0x63, 0xc6, 0x13, 0x61,
	0x75, 0x1d, 0xe0, 0x1e, 0x86, 0xb0, 0xa8, 0xf2, 0xb0, 0x66, 0xc6, 0xef, 0x00, 0x1e, 0xfd, 0x64,
	0xaa, 0xe3, 0xfc, 0xf1, 0xa8, 0x40, 0x9d, 0xb6, 0x07, 0x9d, 0x41, 0x53, 0x14, 0xb8, 0x2c, 0x57,
	0x3a, 0x4f, 0x2f, 0x6c, 0x10, 0xba, 0x84, 0x88, 0x16, 0x31, 0x4b, 0x68, 0x12, 0x11, 0x9c, 0x47,
	0x33, 0x8a, 0x13, 0xca, 0xad, 0x63, 0x07, 0xb8, 0x07, 0xe1, 0xa0, 0x51, 0x02, 0x9c, 0xdf, 0x6b,
	0x1e, 0xdd, 0x41, 0x93, 0xa8, 0x0e, 0x84, 0x35, 0x70, 0x3a, 0x6e, 0xff, 0x7a, 0xe8, 0xd5, 0xad,
	0x7a, 0xff, 0x54, 0x14, 0x74, 0xd7, 0x9f, 0x23, 0x23, 0x6c, 0x0c, 0xc1, 0xed, 0x7a, 0x6b, 0x83,
	0xcd, 0xd6, 0x06, 0x5f, 0x5b, 0x1b, 0xbc, 0xee, 0x6c, 0x63, 0xb3, 0xb3, 0x8d, 0x8f, 0x9d, 0x6d,
	0x3c, 0x5f, 0xb4, 0x17, 0xe1, 0x38, 0x5b, 0xa8, 0xe5, 0x9a, 0x57, 0x12, 0x62, 0xea, 0x21, 0x6e,
	0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xdb, 0xe0, 0x6d, 0xd7, 0x01, 0x00, 0x00,
}
